
SELECT*
FROM production.brands
SELECT*
FROM production.categories	
SELECT*
FROM production.products
SELECT*
FROM production.stocks
SELECT*
FROM sales.customers
SELECT*
FROM sales.order_items
SELECT*
FROM sales.orders
SELECT*
FROM sales.staffs
SELECT*
FROM sales.stores




--- To find the bike sold and total revenue generated by the company


WITH CompanyCTE AS
(SELECT
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name)		AS 'customer',
	cus.city,
	cus.state,
	ord.order_date,
	SUM(ite.quantity) AS 'total_units' ,
	SUM(ite.quantity * ite.list_price) AS 'revenue',
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name) AS 'sales_rep',
	bra.brand_name
	
FROM sales.orders ord
JOIN sales.customers cus
ON ord.customer_id = cus.customer_id
JOIN sales.order_items ite
ON ord.order_id = ite.order_id
JOIN production.products pro
ON ite.product_id = pro.product_id
JOIN production.categories cat
ON pro.category_id = cat.category_id
JOIN sales.stores sto
ON ord.store_id = sto.store_id
JOIN sales.staffs sta
ON ord.staff_id = sta.staff_id
JOIN production.brands bra
ON pro.brand_id = bra.brand_id
GROUP BY
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name),
	cus.city,
	cus.state,
	ord.order_date,
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name),
	bra.brand_name)

SELECT SUM(total_units) AS total_quantity, SUM(revenue) AS Total_revene
FROM CompanyCTE



--- To find the total revenue generated per store


WITH CompanyCTE AS
(SELECT
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name)		AS 'customer',
	cus.city,
	cus.state,
	ord.order_date,
	SUM(ite.quantity) AS 'total_units' ,
	SUM(ite.quantity * ite.list_price) AS 'revenue',
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name) AS 'sales_rep',
	bra.brand_name
	
FROM sales.orders ord
JOIN sales.customers cus
ON ord.customer_id = cus.customer_id
JOIN sales.order_items ite
ON ord.order_id = ite.order_id
JOIN production.products pro
ON ite.product_id = pro.product_id
JOIN production.categories cat
ON pro.category_id = cat.category_id
JOIN sales.stores sto
ON ord.store_id = sto.store_id
JOIN sales.staffs sta
ON ord.staff_id = sta.staff_id
JOIN production.brands bra
ON pro.brand_id = bra.brand_id
GROUP BY
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name),
	cus.city,
	cus.state,
	ord.order_date,
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name),
	bra.brand_name)

SELECT store_name, state, SUM(total_units) AS total_quantity, SUM(revenue) AS total_revenue, (SUM(revenue) * 100 /(SELECT SUM (revenue) FROM CompanyCTE)) AS percentage_of_total
FROM CompanyCTE
GROUP BY store_name, state
ORDER BY percentage_of_total DESC

--- To find the total revenue generated by brand_name

WITH CompanyCTE AS
(SELECT
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name)		AS customer,
	cus.city,
	cus.state,
	ord.order_date,
	SUM(ite.quantity) AS 'total_units' ,
	SUM(ite.quantity * ite.list_price) AS revenue,
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name) AS sales_rep,
	bra.brand_name
	
FROM sales.orders ord
JOIN sales.customers cus
ON ord.customer_id = cus.customer_id
JOIN sales.order_items ite
ON ord.order_id = ite.order_id
JOIN production.products pro
ON ite.product_id = pro.product_id
JOIN production.categories cat
ON pro.category_id = cat.category_id
JOIN sales.stores sto
ON ord.store_id = sto.store_id
JOIN sales.staffs sta
ON ord.staff_id = sta.staff_id
JOIN production.brands bra
ON pro.brand_id = bra.brand_id
GROUP BY
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name),
	cus.city,
	cus.state,
	ord.order_date,
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name),
	bra.brand_name), 
	RankedCTE AS (SELECT brand_name,
				SUM(total_units) AS total_quantity,
				SUM(revenue) AS total_revenue,
				RANK() OVER (ORDER BY SUM(revenue) DESC) AS rank
				FROM CompanyCTE
				GROUP BY brand_name
				)
SELECT brand_name,
	   total_quantity,
	   total_revenue,
	   rank
FROM RankedCTE
ORDER BY rank


--- To find the total revenue generated by category

WITH CompanyCTE AS
(SELECT
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name)		AS customer,
	cus.city,
	cus.state,
	ord.order_date,
	SUM(ite.quantity) AS 'total_units' ,
	SUM(ite.quantity * ite.list_price) AS revenue,
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name) AS sales_rep,
	bra.brand_name
	
FROM sales.orders ord
JOIN sales.customers cus
ON ord.customer_id = cus.customer_id
JOIN sales.order_items ite
ON ord.order_id = ite.order_id
JOIN production.products pro
ON ite.product_id = pro.product_id
JOIN production.categories cat
ON pro.category_id = cat.category_id
JOIN sales.stores sto
ON ord.store_id = sto.store_id
JOIN sales.staffs sta
ON ord.staff_id = sta.staff_id
JOIN production.brands bra
ON pro.brand_id = bra.brand_id
GROUP BY
	ord.order_id,
	CONCAT(cus.first_name, ' ' , cus.last_name),
	cus.city,
	cus.state,
	ord.order_date,
	pro.product_name,
	cat.category_name,
	sto.store_name,
	CONCAT(sta.first_name, ' ' , sta.last_name),
	bra.brand_name), 
	RankedCTE AS (SELECT category_name,
				SUM(total_units) AS total_quantity,
				SUM(revenue) AS total_revenue,
				RANK() OVER (ORDER BY SUM(revenue) DESC) AS rank
				FROM CompanyCTE
				GROUP BY category_name
				)
SELECT category_name,
	   total_quantity,
	   total_revenue,
	   rank
FROM RankedCTE
ORDER BY rank

--- To find 

SELECT 
	YEAR(order_date) AS year,
	SUM(ite.quantity) AS total_quantity,
	SUM(ite.quantity * ite.list_price) AS total_revenue
FROM sales.orders ord
JOIN sales.order_items ite
ON ord.order_id = ite.order_id
WHERE YEAR(order_date) BETWEEN 2016 AND 2018
GROUP BY YEAR(order_date)
ORDER BY total_revenue DESC